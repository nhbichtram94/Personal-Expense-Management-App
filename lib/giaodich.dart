import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:quanlythuchi/trangchu.dart';

class Thuchi extends StatefulWidget {
  const Thuchi({super.key});

  @override
  State<Thuchi> createState() => _ThuchiState();
}

class _ThuchiState extends State<Thuchi> {
  List<Map<String, dynamic>> categories = [];

  @override
  void initState() {
    super.initState();
    _loadCategoriesFromFirebase();//t·∫£i danh m·ª•c ng∆∞·ªùi d√πng t·ª´ Firestore
  }
Future<void> _loadCategoriesFromFirebase() async { // truy v·∫•n danh m·ª•c ng∆∞·ªùi d√πng
  User? user = FirebaseAuth.instance.currentUser; // l·∫•y user ƒëang ƒëƒÉng nh·∫≠p
  if (user == null) return;

  final snapshot = await FirebaseFirestore.instance
      .collection('categories')
      .where('uid', isEqualTo: user.uid) 
      .get();//l·∫•y danh m·ª•c user hi·ªán t·∫°i

  if (!mounted) return; //Ki·ªÉm tra widget c√≤n t·ªìn t·∫°i tr∆∞·ªõc khi g·ªçi setState

  setState(() {
     // c·∫≠p nh·∫≠t danh s√°ch categories ƒë·ªÉ hi·ªÉn th·ªã l·∫°i giao di·ªán
    categories = snapshot.docs
        .map((doc) {// duy·ªát t·ª´ng document
          final data = doc.data();
          if (data['icon'] != null && data['color'] != null) { // l·ªçc b·ªè d·ªØ li·ªáu null
            return {
              'title': data['name'],
              'icon': IconData(data['icon'], fontFamily: 'MaterialIcons'),
              'color': Color(data['color']),
            };
          }
          return null;
        })
        .where((category) => category != null)
        .toList()
        .cast<Map<String, dynamic>>(); // √©p ki·ªÉu danh s√°ch
  });
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Qu·∫£n l√Ω Thu Chi'),
        centerTitle: true,
        backgroundColor: Colors.teal.shade100,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Align(
              alignment: Alignment.centerLeft,
              child: Text(
                'Danh m·ª•c h√¥m nay',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.teal.shade700,
                ),
              ),
            ),
            const SizedBox(height: 12),
            Expanded(
              child:
                  categories.isEmpty
                      ? const Center(
                        child: Text(
                          'Ch∆∞a c√≥ danh m·ª•c, h√£y th√™m ·ªü m·ª•c danh m·ª•c!',
                        ),
                      )
                      : Wrap( //s·∫Øp x·∫øp d·∫°ng l∆∞·ªõi
                        spacing: 12,
                        runSpacing: 12,
                        children:
                            categories.map((cat) {
                              return CategoryCard(
                                title: cat['title'],
                                icon: cat['icon'],
                                color: cat['color'],
                              );
                            }).toList(),
                      ),
            ),
          ],
        ),
      ),
    );
  }
}

class CategoryCard extends StatelessWidget {
  final String title;
  final IconData icon;
  final Color color;

  const CategoryCard({
    super.key,
    required this.title,
    required this.icon,
    required this.color,
  }); // widget ƒë·∫°i di·ªán cho t·ª´ng danh m·ª•c thu chi (an u·ªëng, ...)

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () { // khi nh·∫•n v√†o danh m·ª•c
        showDialog(
          context: context,
          builder: (_) => InputDialog(title: title, icon: icon, color: color), // m·ªü input khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt danh m·ª•c
        );
      },
      child: Container(
        width: 100,
        height: 100,
        decoration: BoxDecoration(
          color: color.withOpacity(0.3),
          borderRadius: BorderRadius.circular(20),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 30, color: Colors.black87),
            const SizedBox(height: 8),
            Text(
              title,
              textAlign: TextAlign.center,
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
          ],
        ),
      ),
    );
  }
}

class InputDialog extends StatefulWidget { // h·ªôp nh·∫≠p giao d·ªãch, nh·∫≠n th√¥ng tin danh m·ª•c t·ª´ categoryCard
  final String title;
  final IconData icon;
  final Color color;

  const InputDialog({
    super.key,
    required this.title,
    required this.icon,
    required this.color,
  });

  @override
  State<InputDialog> createState() => _InputDialogState();
}

class _InputDialogState extends State<InputDialog> {
  final TextEditingController moneyController = TextEditingController();
  final TextEditingController noteController = TextEditingController();
  Future<void> saveTransaction() async {
    User? user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      try {
        await FirebaseFirestore.instance.collection('transactions').add({ // d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u v√†o collection transactions
          'uid': user.uid,
          'sotien': double.parse(moneyController.text),
          'mota': noteController.text,
          'category': widget.title,
          'icon': widget.icon.codePoint,
          'color': widget.color.value,
          'createdAt': DateTime.now(),
        });
      } catch (e) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('L·ªói khi l∆∞u giao d·ªãch: $e')));
      }
    }
  }

  Future<void> updateCategorySpent({ // c√¥ng th√™m chi ti√™u v√†o danh m·ª•c
    required String categoryName,
    required double amount,
  }) async {
    final snapshot =
        await FirebaseFirestore.instance
            .collection('categories')
            .where('name', isEqualTo: categoryName)
            .limit(1)
            .get();

    if (snapshot.docs.isNotEmpty) {
      final doc = snapshot.docs.first;
      final currentSpent = doc['spent'] ?? 0;
      await FirebaseFirestore.instance
          .collection('categories')
          .doc(doc.id)
          .update({'spent': currentSpent + amount});
    } else {
      throw Exception("Kh√¥ng t√¨m th·∫•y danh m·ª•c ƒë·ªÉ c·∫≠p nh·∫≠t.");
    }
  }

  @override
  Widget build(BuildContext context) {
    final currentTime = DateFormat('HH:mm - dd/MM/yyyy').format(DateTime.now());

    return AlertDialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      title: Row(
        children: [
          const Icon(Icons.edit_note, color: Colors.teal),
          const SizedBox(width: 8),
          Expanded(child: Text('Th√™m chi ti√™u: ${widget.title}')),
        ],
      ),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'üïì $currentTime',
              style: const TextStyle(fontSize: 12, color: Colors.grey),
            ),
            const SizedBox(height: 12),
            TextField(                // nh·∫≠p s·ªë ti·ªÅn v√† ghi ch√∫
              controller: moneyController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: 'S·ªë ti·ªÅn',
                prefixIcon: const Icon(Icons.attach_money),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: noteController,
              decoration: InputDecoration(
                labelText: 'Ghi ch√∫',
                prefixIcon: const Icon(Icons.notes),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: const Text('H·ªßy'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        ElevatedButton.icon(
          icon: const Icon(Icons.save),
          label: const Text('L∆∞u'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.teal,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
          ),
          onPressed: () { // n√∫t L∆ØU
            final money = moneyController.text.trim();
            final note = noteController.text.trim();

            if (money.isEmpty) { // ki·ªÉm tra tr·ªëng
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn')),
              );
              return;
            }

            saveTransaction();
            // Th√¥ng b√°o l∆∞u th√†nh c√¥ng
            updateCategorySpent( // c·∫≠p nh·∫≠t t·ªïng chi ti√™u danh m·ª•c
              categoryName: widget.title,
              amount: double.parse(money),
            );
            showDialog( // sau khi l∆∞u th√†nh c√¥ng
              context: context,
              builder:
                  (_) => AlertDialog(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    title: const Text('‚úÖ Th√†nh c√¥ng'),
                    content: Text(
                      'ƒê√£ l∆∞u chi ti√™u "${widget.title}" v·ªõi s·ªë ti·ªÅn $money VNƒê',
                    ),
                    actions: [
                      TextButton(
                        child: const Text('OK'),
                        onPressed:
                            () => Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => Trangchu(),// chuy·ªÉn v·ªÅ trang ch·ªß
                              ),
                            ),
                      ),
                    ],
                  ),
            );
          },
        ),
      ],
    );
  }
}
